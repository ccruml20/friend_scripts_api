'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RichTextEditor = require('./RichTextEditor');

var _RichTextEditor2 = _interopRequireDefault(_RichTextEditor);

var _draftJs = require('draft-js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RichEditorDemo = function (_React$Component) {
    _inherits(RichEditorDemo, _React$Component);

    function RichEditorDemo(props, context) {
        _classCallCheck(this, RichEditorDemo);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RichEditorDemo).call(this, props, context));

        _this.state = {
            value: (0, _RichTextEditor.createEmptyValue)(),
            format: 'html' }, _this.onChange = _this.onChange.bind(_this);
        _this.onChangeFormat = _this.onChangeFormat.bind(_this);
        _this.onChangeSource = _this.onChangeSource.bind(_this);
        return _this;
    }

    _createClass(RichEditorDemo, [{
        key: 'logState',
        value: function logState() {
            console.log(this.state.value); // eslint-disable-line
            var editorState = this.state.value.getEditorState();
            var contentState = window.contentState = editorState.getCurrentContent().toJS();
            console.log(contentState); // eslint-disable-line
        }
    }, {
        key: 'logStateRaw',
        value: function logStateRaw() {
            var editorState = this.state.value.getEditorState();
            var contentState = editorState.getCurrentContent();
            var rawContentState = window.rawContentState = (0, _draftJs.convertToRaw)(contentState);
            console.log(JSON.stringify(rawContentState)); // eslint-disable-line
        }
    }, {
        key: 'onChange',
        value: function onChange() {
            var value = arguments.length <= 0 || arguments[0] === undefined ? _RichTextEditor.EditorValue : arguments[0];

            this.setState({ value: value });
        }
    }, {
        key: 'onChangeSource',
        value: function onChangeSource() {
            var event = arguments.length <= 0 || arguments[0] === undefined ? Object : arguments[0];

            var source = event.target.value;
            var oldValue = this.state.value;
            this.setState({
                value: oldValue.setContentFromString(source, this.state.format)
            });
        }
    }, {
        key: 'onChangeFormat',
        value: function onChangeFormat() {
            var event = arguments.length <= 0 || arguments[0] === undefined ? Object : arguments[0];

            this.setState({ format: event.target.value });
        }
    }, {
        key: 'render',
        value: function render() {
            var value = this.state.value;

            return _react2.default.createElement(
                'div',
                { className: 'editor-demo' },
                _react2.default.createElement(
                    'div',
                    { className: 'row' },
                    _react2.default.createElement(_RichTextEditor2.default, {
                        value: value,
                        onChange: this.onChange,
                        placeholder: 'Type here ...'
                    })
                ),
                _react2.default.createElement(
                    'label',
                    { className: 'radio-item' },
                    _react2.default.createElement('input', {
                        className: 'display',
                        type: 'radio',
                        name: 'format',
                        value: 'html',
                        checked: this.state.format === 'html',
                        onChange: this.onChangeFormat
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'label' },
                        'HTML'
                    )
                ),
                _react2.default.createElement(
                    'label',
                    { className: 'radio-item' },
                    _react2.default.createElement('input', {
                        className: 'display',
                        type: 'radio',
                        name: 'format',
                        value: 'markdown',
                        checked: this.state.format === 'markdown',
                        onChange: this.onChangeFormat
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'label' },
                        'Markdown'
                    )
                ),
                _react2.default.createElement(
                    'span',
                    { className: 'log', onClick: this.logState },
                    'Log State'
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'row' },
                    _react2.default.createElement('textarea', {
                        className: 'source',
                        placeholder: 'Editor Source',
                        value: value.toString(this.state.format),
                        onChange: this.onChangeSource
                    })
                )
            );
        }
    }]);

    return RichEditorDemo;
}(_react2.default.Component);

exports.default = RichEditorDemo;