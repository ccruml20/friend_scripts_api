'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _draftJsUtils = require('draft-js-utils');

var _editorMethods = require('../functions/editorMethods');

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//import { MASTER_EDITOR } from '../lib/EditorToolbarConfig'; //not currently needed as this is not controlled by config


var LinkInputPopover = function (_Component) {
    _inherits(LinkInputPopover, _Component);

    function LinkInputPopover(props) {
        var _Object$getPrototypeO;

        _classCallCheck(this, LinkInputPopover);

        var _this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(LinkInputPopover)).call.apply(_Object$getPrototypeO, [this, props].concat(Array.prototype.slice.call(arguments))));

        _this.state = {
            showPopover: false,
            popoverBasis: {},
            inputRef: ''
        };

        _this.toggleLink = _editorMethods.toggleLink.bind(_this);
        _this.setLink = _editorMethods.setLink.bind(_this);
        _this.removeLink = _editorMethods.removeLink.bind(_this);
        _this.updateLinkInputValue = _editorMethods.updateLinkInputValue.bind(_this);
        _this.togglePopover = _editorMethods.togglePopover.bind(_this);
        _this.isLinkingDisabled = _editorMethods.isLinkingDisabled.bind(_this);

        _this.closePopoverOnResize = _editorMethods.closePopoverOnResize.bind(_this);
        _this.handleOnKeyPress = _editorMethods.handleOnKeyPress.bind(_this, _this.setLink);
        return _this;
    }

    _createClass(LinkInputPopover, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            window.addEventListener('resize', this.closePopoverOnResize);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.removeEventListener('resize', this.closePopoverOnResize);
        }
    }, {
        key: 'renderPopover',
        value: function renderPopover() {
            var popoverLinkStyles = this.props.popoverLinkStyles;
            var popoverBasis = this.state.popoverBasis;


            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'form',
                    {
                        style: Object.assign({}, popoverBasis, { border: '1px solid ' }, popoverLinkStyles.popoverContainer, popoverLinkStyles.basePopoverContainer)

                    },
                    _react2.default.createElement(
                        'div',
                        { style: popoverLinkStyles.inner },
                        _react2.default.createElement('input', {
                            type: 'text',
                            placeholder: 'https://example.com/',
                            style: Object.assign({}, { border: '1px solid' }, popoverLinkStyles.input),
                            value: this.state.inputRef,
                            onChange: this.updateLinkInputValue,
                            onKeyPress: this.handleOnKeyPress
                        }),
                        _react2.default.createElement(
                            'span',
                            { style: popoverLinkStyles.buttonGroup },
                            _react2.default.createElement(_Button2.default, {
                                label: 'Cancel',
                                iconName: 'cancel',
                                onClick: this.toggleLink,
                                passedButtonStyles: popoverLinkStyles.formButtons
                            }),
                            _react2.default.createElement(_Button2.default, {
                                label: 'Submit',
                                iconName: 'accept',
                                type: 'submit',
                                onClick: this.setLink,
                                passedButtonStyles: popoverLinkStyles.formButtons
                            })
                        )
                    )
                ),
                _react2.default.createElement('div', { style: popoverLinkStyles.basePopoverBackdrop, onClick: this.toggleLink })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var popoverLinkStyles = _props.popoverLinkStyles;
            var label = _props.label;
            var editorState = _props.editorState;


            var getButtons = this.isLinkingDisabled();
            var isLinkDisabled = !getButtons[0];
            var isRemoveLinkDisabled = !getButtons[1];

            var renderPopover = this.state.showPopover ? this.renderPopover() : null;
            return _react2.default.createElement(
                'div',
                { style: _styles2.default.buttongroup },
                _react2.default.createElement(
                    'div',
                    { style: popoverLinkStyles.baseContainer },
                    _react2.default.createElement(
                        'div',
                        { style: popoverLinkStyles.basePopoverTrigger },
                        _react2.default.createElement(
                            _Button2.default,
                            {
                                label: label,
                                isDisabled: isLinkDisabled,
                                onClick: this.toggleLink
                            },
                            renderPopover
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { style: popoverLinkStyles.basePopoverTrigger },
                        _react2.default.createElement(_Button2.default, {
                            label: 'Remove Link',
                            isDisabled: isRemoveLinkDisabled,
                            onClick: this.removeLink
                        })
                    )
                )
            );
        }
    }]);

    return LinkInputPopover;
}(_react.Component);

LinkInputPopover.propTypes = {
    popoverLinkStyles: _react.PropTypes.object,
    editorState: _react.PropTypes.object,
    label: _react.PropTypes.string,
    entityLink: _react.PropTypes.object
};

LinkInputPopover.defaultProps = {
    popoverLinkStyles: Object.assign({}, _styles2.default.popoverLinkStyles, _styles2.default.baseStyles),
    entityLink: _draftJsUtils.ENTITY_TYPE
};

exports.default = LinkInputPopover;