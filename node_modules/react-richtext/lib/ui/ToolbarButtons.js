'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _editorMethods = require('../functions/editorMethods');

var _EditorToolbarConfig = require('./../lib/EditorToolbarConfig');

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToolbarButtons = function (_Component) {
    _inherits(ToolbarButtons, _Component);

    function ToolbarButtons(props) {
        _classCallCheck(this, ToolbarButtons);

        //Helper function
        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarButtons).call(this, props));

        _this.getFuncName = _editorMethods.getFuncName.bind(_this);
        _this.getCurrentBlockType = _editorMethods.getCurrentBlockType.bind(_this);
        _this.toggleInlineStyle = _editorMethods.toggleInlineStyle.bind(_this);
        _this.toggleBlockType = _editorMethods.toggleBlockType.bind(_this);
        return _this;
    }

    _createClass(ToolbarButtons, [{
        key: 'buttons',
        value: function buttons() {
            var self = this;
            var _props = this.props;
            var basicButtonsSrc = _props.basicButtonsSrc;
            var editorState = _props.editorState;


            var Buttons = basicButtonsSrc.map(function (v, key) {

                var buttonsConfig = v.config;
                var buttonsStyle = v.draftStyle;
                var buttonsBlockMethod = v.blockMethod;
                var buttonsChangeMethod = v.changeMethod;
                var ButtonKey = key;

                var blockType = self.getFuncName(buttonsBlockMethod)();
                var currentStyle = editorState.getCurrentInlineStyle();
                var toggleStyles = self.getFuncName(buttonsChangeMethod);

                var Buttons = buttonsConfig.map(function (type, index) {
                    return _react2.default.createElement(_Button2.default, {
                        key: String(index),
                        isActive: buttonsStyle === 'inline' ? currentStyle.has(type.style) : buttonsStyle === 'block' ? type.style === blockType : '',
                        onToggle: toggleStyles,
                        styles: type.style,
                        label: type.label
                    });
                });

                return _react2.default.createElement(
                    'div',
                    { style: _styles2.default.buttongroup, key: ButtonKey },
                    Buttons
                );
            });

            return Buttons;
        }
    }, {
        key: 'render',
        value: function render() {
            var toolbarButtonsStyles = this.props.toolbarButtonsStyles;

            var renderButtons = this.buttons();
            return _react2.default.createElement(
                'div',
                { style: toolbarButtonsStyles.baseContainer },
                renderButtons
            );
        }
    }]);

    return ToolbarButtons;
}(_react.Component);

ToolbarButtons.propTypes = {
    basicButtonsSrc: _react.PropTypes.array,
    toolbarButtonsStyles: _react.PropTypes.object,
    editorState: _react.PropTypes.object
};
ToolbarButtons.defaultProps = {
    basicButtonsSrc: _EditorToolbarConfig.MASTER_EDITOR.basicButtons,
    //toolbarButtonsStyles: styles.toolbarButtonsStyles,
    toolbarButtonsStyles: Object.assign({}, _styles2.default.baseStyles, _styles2.default.toolbarButtonsStyles)
};

exports.default = ToolbarButtons;