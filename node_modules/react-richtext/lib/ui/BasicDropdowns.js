'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Dropdown = require('./Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _editorMethods = require('../functions/editorMethods');

var _EditorToolbarConfig = require('../lib/EditorToolbarConfig');

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*MASTER_EDITOR references the other DROPDOWN objects,
 they're not explicitly named in this file, only referenced via variables*/


var BasicDropdowns = function (_Component) {
    _inherits(BasicDropdowns, _Component);

    function BasicDropdowns(props) {
        _classCallCheck(this, BasicDropdowns);

        //Helper function
        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BasicDropdowns).call(this, props));

        _this.getFuncName = _editorMethods.getFuncName.bind(_this);

        _this.getCurrentBlockType = _editorMethods.getCurrentBlockType.bind(_this);
        _this.toggleBlockType = _editorMethods.toggleBlockType.bind(_this);
        _this.toggleInlineStyle = _editorMethods.toggleInlineStyle.bind(_this);

        return _this;
    }

    _createClass(BasicDropdowns, [{
        key: 'dropdowns',
        value: function dropdowns() {
            var self = this;
            var _props = this.props;
            var basicDropdownSrc = _props.basicDropdownSrc;
            var basicDropdownsStyles = _props.basicDropdownsStyles;


            var dropdowns = basicDropdownSrc.map(function (v, key) {

                var dropdownConfig = v.config;
                var dropdownLabel = v.label;
                var dropdownBlockMethod = v.blockMethod;
                var dropdownChangeMethod = v.changeMethod;
                var dropdownKey = key;
                var choices = new Map(dropdownConfig.map(function (type) {
                    return [type.style, type.label];
                }));

                var blockType = self.getFuncName(dropdownBlockMethod)();
                var toggleInlineStyles = self.getFuncName(dropdownChangeMethod);

                return _react2.default.createElement(
                    'div',
                    { key: dropdownKey, style: basicDropdownsStyles.dropdown },
                    _react2.default.createElement(_Dropdown2.default, {
                        dropdownTitle: dropdownLabel,
                        choices: choices,
                        selectedKey: blockType,
                        onChange: toggleInlineStyles
                    })
                );
            });
            return dropdowns;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props;
            var basicDropdownSrc = _props2.basicDropdownSrc;
            var basicDropdownsStyles = _props2.basicDropdownsStyles;

            var renderDropdowns = this.dropdowns();
            return _react2.default.createElement(
                'div',
                { style: basicDropdownsStyles.dropdownContainer },
                renderDropdowns
            );
        }
    }]);

    return BasicDropdowns;
}(_react.Component);

BasicDropdowns.propTypes = {

    basicDropdownSrc: _react.PropTypes.array,
    basicDropdownsStyles: _react.PropTypes.object,

    //Records from parent
    editorState: _react.PropTypes.object,
    onChange: _react.PropTypes.func
};

BasicDropdowns.defaultProps = {

    basicDropdownSrc: _EditorToolbarConfig.MASTER_EDITOR.basicDropdowns,
    basicDropdownsStyles: _styles2.default.basicDropdownsStyles
};

exports.default = BasicDropdowns;