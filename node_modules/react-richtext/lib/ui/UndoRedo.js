'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _editorMethods = require('../functions/editorMethods');

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UndoRedo = function (_Component) {
    _inherits(UndoRedo, _Component);

    function UndoRedo(props) {
        var _Object$getPrototypeO;

        _classCallCheck(this, UndoRedo);

        var _this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(UndoRedo)).call.apply(_Object$getPrototypeO, [this, props].concat(Array.prototype.slice.call(arguments))));

        _this.undo = _editorMethods.undo.bind(_this);
        _this.redo = _editorMethods.redo.bind(_this);
        return _this;
    }

    _createClass(UndoRedo, [{
        key: 'render',
        value: function render() {
            var label = this.props.label;

            var canUndo = this.props.editorState.getUndoStack().size !== 0;
            var canRedo = this.props.editorState.getRedoStack().size !== 0;
            return _react2.default.createElement(
                'div',
                { style: _styles2.default.buttongroup },
                _react2.default.createElement(_Button2.default, { label: label, isDisabled: !canUndo, onClick: this.undo, focusOnClick: false }),
                _react2.default.createElement(_Button2.default, { label: 'Redo', isDisabled: !canRedo, onClick: this.redo, focusOnClick: false })
            );
        }
    }]);

    return UndoRedo;
}(_react.Component);

UndoRedo.propTypes = {
    editorState: _react.PropTypes.object,
    label: _react.PropTypes.string
};

exports.default = UndoRedo;