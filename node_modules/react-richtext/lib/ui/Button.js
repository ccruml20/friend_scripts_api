'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _icons = require('./rte-icons/icons');

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Button = function (_Component) {
    _inherits(Button, _Component);

    function Button(props) {
        _classCallCheck(this, Button);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Button).call(this, props));

        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass(Button, [{
        key: 'onClick',
        value: function onClick() {

            this.props.onToggle(this.props.styles);
        }
    }, {
        key: 'getStyles',
        value: function getStyles() {
            var styles = {
                button: {
                    background: this.props.isActive ? 'none #d8d8d8' : '#F3F3F3',
                    cursor: this.props.isDisabled ? 'not-allowed' : 'pointer'
                },
                icon: {
                    opacity: this.props.isDisabled ? 0.5 : ''
                }
            };
            return styles;
        }
    }, {
        key: 'renderIcons',
        value: function renderIcons() {
            var buttonStyles = this.props.buttonStyles;

            var thisStyle = this.getStyles();
            var displayIcon = this.props.label === 'Bold' ? _react2.default.createElement(_icons.IconBold, null) : this.props.label === 'Monospace' ? _react2.default.createElement(_icons.IconCode, null) : this.props.label === 'Italic' ? _react2.default.createElement(_icons.IconItalic, null) : this.props.label === 'underline' ? _react2.default.createElement(_icons.IconUnderline, null) : this.props.label === 'Strikethrough' ? _react2.default.createElement(_icons.IconStrikethrough, null) : this.props.label === 'LeftIndent' ? _react2.default.createElement(_icons.IconLeftIndent, null) : this.props.label === 'RightIndent' ? _react2.default.createElement(_icons.IconRightIndent, null) : this.props.label === 'OL' ? _react2.default.createElement(_icons.IconOrderedList, null) : this.props.label === 'UL' ? _react2.default.createElement(_icons.IconUnorderedList, null) : this.props.label === 'Link' ? _react2.default.createElement(_icons.IconLink, null) : this.props.label === 'Remove Link' ? _react2.default.createElement(_icons.IconRemoveLink, null) : this.props.label === 'Undo' ? _react2.default.createElement(_icons.IconUndo, null) : this.props.label === 'Redo' ? _react2.default.createElement(_icons.IconRedo, null) : this.props.label === 'Blockquote' ? _react2.default.createElement(_icons.IconBlockquote, null) : this.props.label === 'Color' ? _react2.default.createElement(_icons.IconColorFill, null) : this.props.label === 'Cancel' ? _react2.default.createElement(_icons.IconCancel, null) : this.props.label === 'Submit' ? _react2.default.createElement(_icons.IconAccept, null) : this.props.label === 'Image' ? _react2.default.createElement(_icons.IconImage, null) : this.props.label === 'LocalImage' ? _react2.default.createElement(_icons.IconAttachment, null) : this.props.label === 'ColorFill' ? _react2.default.createElement(_icons.IconColorPallete, null) : '';

            return _react2.default.createElement(
                'span',
                { style: Object.assign({}, thisStyle.icon, buttonStyles.icon) },
                displayIcon
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var label = _props.label;
            var passedButtonStyles = _props.passedButtonStyles;
            var buttonStyles = _props.buttonStyles;
            var isActive = _props.isActive;
            var isDisabled = _props.isDisabled;
            var onClick = _props.onClick;
            var children = _props.children;


            var OnClick = isDisabled ? null : !onClick ? this.onClick : onClick;

            var type = this.props.formSubmit ? 'submit' : 'button';
            var thisStyle = this.getStyles();

            return _react2.default.createElement(
                'span',
                null,
                _react2.default.createElement(
                    'button',
                    {
                        title: label,
                        type: type,
                        onClick: OnClick,
                        style: Object.assign({}, thisStyle.button, buttonStyles.button, passedButtonStyles)
                    },
                    this.renderIcons()
                ),
                children
            );
        }
    }]);

    return Button;
}(_react.Component);

;

Button.propTypes = {
    iconName: _react.PropTypes.string,
    passedButtonStyles: _react.PropTypes.object,
    buttonStyles: _react.PropTypes.object,
    styles: _react.PropTypes.string,
    label: _react.PropTypes.string,
    className: _react.PropTypes.string,
    isDisabled: _react.PropTypes.bool,
    onToggle: _react.PropTypes.func,
    focusOnClick: _react.PropTypes.bool,
    onClick: _react.PropTypes.func,
    children: _react.PropTypes.node,
    formSubmit: _react.PropTypes.bool
};

Button.defaultProps = {
    buttonStyles: _styles2.default.buttonStyles,
    isDisabled: false
};

exports.default = Button;