'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _EditorToolbarConfig = require('../lib/EditorToolbarConfig');

var _editorMethods = require('../functions/editorMethods');

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorsButtonPopover = function (_Component) {
    _inherits(ColorsButtonPopover, _Component);

    function ColorsButtonPopover(props) {
        _classCallCheck(this, ColorsButtonPopover);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ColorsButtonPopover).call(this, props));

        _this.state = {
            showPopover: false,
            popoverBasis: { 'left': 0 },
            popoverKey: -1
        };

        _this.getFuncName = _editorMethods.getFuncName.bind(_this);
        _this.togglePopover = _editorMethods.togglePopover.bind(_this);

        _this.toggleColorsTrigger = _editorMethods.toggleColorsTrigger.bind(_this);
        _this.toggleFillColorsStyle = _editorMethods.toggleFillColorsStyle.bind(_this);
        _this.toggleInlineColorsStyle = _editorMethods.toggleInlineColorsStyle.bind(_this);

        _this.closePopoverOnResize = _editorMethods.closePopoverOnResize.bind(_this);
        return _this;
    }

    _createClass(ColorsButtonPopover, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            window.addEventListener('resize', this.closePopoverOnResize);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.removeEventListener('resize', this.closePopoverOnResize);
        }
    }, {
        key: 'renderPopover',
        value: function renderPopover() {
            var _props = this.props;
            var popoverColorsSrc = _props.popoverColorsSrc;
            var popoverColorsStyles = _props.popoverColorsStyles;
            var _state = this.state;
            var popoverBasis = _state.popoverBasis;
            var popoverKey = _state.popoverKey;


            var popoverConfig = popoverColorsSrc[popoverKey];
            var renderColorsButtons = this.renderColorsButtons();
            var renderDisplayLabel = popoverConfig.displayLabel != null ? _react2.default.createElement(
                'div',
                { style: popoverColorsStyles.basePopoverLabel },
                popoverConfig.displayLabel
            ) : null;

            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'div',
                    { style: Object.assign({}, popoverBasis, popoverColorsStyles.popoverContainer, popoverColorsStyles.basePopoverContainer) },
                    renderDisplayLabel,
                    _react2.default.createElement(
                        'div',
                        { style: popoverColorsStyles.basePopoverLabel },
                        renderColorsButtons
                    )
                ),
                _react2.default.createElement('div', { style: popoverColorsStyles.basePopoverBackdrop, onClick: this.togglePopover })
            );
        }
    }, {
        key: 'renderColorsButtons',
        value: function renderColorsButtons() {
            var popoverKey = this.state.popoverKey;
            var _props2 = this.props;
            var popoverColorsSrc = _props2.popoverColorsSrc;
            var popoverColorsStyles = _props2.popoverColorsStyles;


            var popoverConfig = popoverColorsSrc[popoverKey];
            var colorsConfig = popoverConfig.config;
            var selectMethod = this.getFuncName(popoverConfig.selectMethod);

            var colorsButtons = colorsConfig.map(function (type, index) {
                return _react2.default.createElement(_Button2.default, {
                    key: index,
                    label: type.label,
                    isActive: false,
                    styles: type.style,
                    onToggle: selectMethod,
                    passedButtonStyles: Object.assign({}, { background: type.hex }, popoverColorsStyles.popoverColorButtons)
                });
            });
            return colorsButtons;
        }
    }, {
        key: 'renderTriggerButtons',
        value: function renderTriggerButtons() {
            var self = this;
            var _state2 = this.state;
            var showPopover = _state2.showPopover;
            var popoverKey = _state2.popoverKey;
            var _props3 = this.props;
            var popoverColorsSrc = _props3.popoverColorsSrc;
            var popoverColorsStyles = _props3.popoverColorsStyles;


            var triggerButtons = popoverColorsSrc.map(function (v, key) {
                var toggleMethod = self.getFuncName(v.changeMethod).bind(this, key);

                var renderPopover = showPopover && popoverKey == key ? self.renderPopover() : null;

                return _react2.default.createElement(
                    'div',
                    { key: key, style: popoverColorsStyles.basePopoverTrigger },
                    _react2.default.createElement(_Button2.default, {
                        label: v.label,
                        onClick: toggleMethod
                    }),
                    renderPopover
                );
            });
            return triggerButtons;
        }
    }, {
        key: 'render',
        value: function render() {
            var popoverColorsStyles = this.props.popoverColorsStyles;


            var triggerButtons = this.renderTriggerButtons();

            return _react2.default.createElement(
                'div',
                { style: popoverColorsStyles.baseContainer },
                _react2.default.createElement(
                    'div',
                    null,
                    triggerButtons
                )
            );
        }
    }]);

    return ColorsButtonPopover;
}(_react.Component);

;

ColorsButtonPopover.PropTypes = {
    popoverColorsSrc: _react.PropTypes.array,
    popoverColorsStyles: _react.PropTypes.object,
    editorState: _react.PropTypes.object,
    onChange: _react.PropTypes.object
};

ColorsButtonPopover.defaultProps = {
    //popoverColorsStyles: styles.popoverColorsStyles,
    popoverColorsStyles: Object.assign({}, _styles2.default.popoverColorsStyles, _styles2.default.baseStyles)
};

exports.default = ColorsButtonPopover;