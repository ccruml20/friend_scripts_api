'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.shouldHidePlaceholder = shouldHidePlaceholder;
exports.handleReturn = handleReturn;
exports.handleReturnSoftNewline = handleReturnSoftNewline;
exports.handleReturnEmptyListItem = handleReturnEmptyListItem;
exports.handleReturnSpecialBlock = handleReturnSpecialBlock;
exports.onTab = onTab;
exports.customKeyHandler = customKeyHandler;
exports.handleKeyCommand = handleKeyCommand;
exports.focus = focus;
exports.getBlockStyle = getBlockStyle;
exports.onChange = onChange;
exports.createEmptyValue = createEmptyValue;
exports.createValueFromString = createValueFromString;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _draftJs = require('draft-js');

var _getDefaultKeyBinding = require('draft-js/lib/getDefaultKeyBinding');

var _getDefaultKeyBinding2 = _interopRequireDefault(_getDefaultKeyBinding);

var _changeBlockDepth = require('../lib/changeBlockDepth');

var _changeBlockDepth2 = _interopRequireDefault(_changeBlockDepth);

var _changeBlockType = require('../lib/changeBlockType');

var _changeBlockType2 = _interopRequireDefault(_changeBlockType);

var _insertBlockAfter = require('../lib/insertBlockAfter');

var _insertBlockAfter2 = _interopRequireDefault(_insertBlockAfter);

var _isListItem = require('../lib/isListItem');

var _isListItem2 = _interopRequireDefault(_isListItem);

var _isSoftNewlineEvent = require('draft-js/lib/isSoftNewlineEvent');

var _isSoftNewlineEvent2 = _interopRequireDefault(_isSoftNewlineEvent);

var _LinkDecorator = require('../lib/LinkDecorator');

var _LinkDecorator2 = _interopRequireDefault(_LinkDecorator);

var _draftJsUtils = require('draft-js-utils');

var _EditorValue = require('../lib/EditorValue');

var _EditorValue2 = _interopRequireDefault(_EditorValue);

var _styles = require('../assets/styles');

var _styles2 = _interopRequireDefault(_styles);

var _styleMap = require('../assets/styleMap');

var _styleMap2 = _interopRequireDefault(_styleMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var richTextEditorStyles = _styles2.default.richTextEditorStyles;
var decorator = new _draftJs.CompositeDecorator([_LinkDecorator2.default]);

function shouldHidePlaceholder() {
    var editorState = this.props.value.getEditorState();
    var contentState = editorState.getCurrentContent();
    if (!contentState.hasText()) {
        if (contentState.getBlockMap().first().getType() !== 'unstyled') {
            return true;
        }
    }
    return false;
}

function handleReturn(event) {
    if (this.handleReturnSoftNewline(event)) {
        return true;
    }
    if (this.handleReturnEmptyListItem()) {
        return true;
    }
    if (this.handleReturnSpecialBlock()) {
        return true;
    }
    return false;
}

function handleReturnSoftNewline(event) {
    var editorState = this.props.value.getEditorState();
    if ((0, _isSoftNewlineEvent2.default)(event)) {
        var selection = editorState.getSelection();
        if (selection.isCollapsed()) {
            this.onChange(_draftJs.RichUtils.insertSoftNewline(editorState));
        } else {
            var content = editorState.getCurrentContent();
            var newContent = _draftJs.Modifier.removeRange(content, selection, 'forward');
            var newSelection = newContent.getSelectionAfter();
            var block = newContent.getBlockForKey(newSelection.getStartKey());
            newContent = _draftJs.Modifier.insertText(newContent, newSelection, '\n', block.getInlineStyleAt(newSelection.getStartOffset()), null);
            this.onChange(_draftJs.EditorState.push(editorState, newContent, 'insert-fragment'));
        }
        return true;
    }
    return false;
}

// If the cursor is in an empty list item when return is pressed, then the
// block type should change to normal (end the list).
function handleReturnEmptyListItem() {
    var editorState = this.props.value.getEditorState();
    var selection = editorState.getSelection();
    if (selection.isCollapsed()) {
        var contentState = editorState.getCurrentContent();
        var blockKey = selection.getStartKey();
        var block = contentState.getBlockForKey(blockKey);
        if ((0, _isListItem2.default)(block) && block.getLength() === 0) {
            var depth = block.getDepth();
            var newState = depth === 0 ? (0, _changeBlockType2.default)(editorState, blockKey, _draftJsUtils.BLOCK_TYPE.UNSTYLED) : (0, _changeBlockDepth2.default)(editorState, blockKey, depth - 1);
            this.onChange(newState);
            return true;
        }
    }
    return false;
}

// If the cursor is at the end of a special block (any block type other than
// normal or list item) when return is pressed, new block should be normal.
function handleReturnSpecialBlock() {
    var editorState = this.props.value.getEditorState();
    var selection = editorState.getSelection();
    if (selection.isCollapsed()) {
        var contentState = editorState.getCurrentContent();
        var blockKey = selection.getStartKey();
        var block = contentState.getBlockForKey(blockKey);
        if (!(0, _isListItem2.default)(block) && block.getType() !== _draftJsUtils.BLOCK_TYPE.UNSTYLED) {
            // If cursor is at end.
            if (block.getLength() === selection.getStartOffset()) {
                var newEditorState = (0, _insertBlockAfter2.default)(editorState, blockKey, _draftJsUtils.BLOCK_TYPE.UNSTYLED);
                this.onChange(newEditorState);
                return true;
            }
        }
    }
    return false;
}

function onTab(event) {
    var editorState = this.props.value.getEditorState.bind(this);
    var newEditorState = _draftJs.RichUtils.onTab(event, editorState, MAX_LIST_DEPTH);
    if (newEditorState !== editorState) {
        this.onChange(newEditorState);
    }
}

function customKeyHandler(event) {
    // Allow toolbar to catch key combinations.
    var eventFlags = {};
    this._keyEmitter.emit('keypress', event, eventFlags);
    if (eventFlags.wasHandled) {
        return null;
    } else {
        return (0, _getDefaultKeyBinding2.default)(event);
    }
}

function handleKeyCommand(command) {
    var editorState = this.props.value.getEditorState();
    var newEditorState = _draftJs.RichUtils.handleKeyCommand(editorState, command);
    if (newEditorState) {
        this.onChange(newEditorState);
        return true;
    } else {
        return false;
    }
}

function focus() {
    this.refs.editor.focus();
}

function getBlockStyle(block) {
    var result = richTextEditorStyles.block;
    switch (block.getType()) {
        case 'unstyled':
            return result, richTextEditorStyles.paragraph;
        case 'blockquote':
            return result, richTextEditorStyles.blockquote;
        case 'code-block':
            return result, richTextEditorStyles.codeBlock;
        default:
            return result;
    }
}

function onChange(editorState) {
    var _props = this.props;
    var onChange = _props.onChange;
    var value = _props.value;

    if (onChange != null) {
        var newValue = value.setEditorState(editorState);
        onChange(newValue);
    }
}

function createEmptyValue() {
    return _EditorValue2.default.createEmpty(decorator);
}

function createValueFromString(markup, format) {
    return _EditorValue2.default.createFromString(markup, format, decorator);
}