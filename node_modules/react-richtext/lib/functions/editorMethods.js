'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getFuncName = getFuncName;
exports.getCurrentBlockType = getCurrentBlockType;
exports.toggleInlineStyle = toggleInlineStyle;
exports.toggleBlockType = toggleBlockType;
exports.handleOnKeyPress = handleOnKeyPress;
exports.updateLinkInputValue = updateLinkInputValue;
exports.setLink = setLink;
exports.toggleLink = toggleLink;
exports.removeLink = removeLink;
exports.isLinkingDisabled = isLinkingDisabled;
exports.toggleColorsTrigger = toggleColorsTrigger;
exports.toggleInlineColorsStyle = toggleInlineColorsStyle;
exports.toggleFillColorsStyle = toggleFillColorsStyle;
exports.undo = undo;
exports.redo = redo;
exports.addImageLink = addImageLink;
exports.uploadImage = uploadImage;
exports.fileInput = fileInput;
exports.insertImage = insertImage;
exports.setPopoverPlacement = setPopoverPlacement;
exports.togglePopover = togglePopover;
exports.closePopoverOnResize = closePopoverOnResize;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _draftJs = require('draft-js');

var _getEntityAtCursor = require('../lib/getEntityAtCursor');

var _getEntityAtCursor2 = _interopRequireDefault(_getEntityAtCursor);

var _clearEntityForRange = require('../lib/clearEntityForRange');

var _clearEntityForRange2 = _interopRequireDefault(_clearEntityForRange);

var _draftJsUtils = require('draft-js-utils');

var _KeyBindingUtil = require('draft-js/lib/KeyBindingUtil');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getFuncName(fn) {
    var functionName = this[fn];
    return functionName;
}

function getCurrentBlockType() {
    var editorState = this.props.editorState;

    var selection = editorState.getSelection();

    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();
}

function toggleInlineStyle(inlineStyle) {
    this.props.onChange(_draftJs.RichUtils.toggleInlineStyle(this.props.editorState, inlineStyle));
}

function toggleBlockType(blockType) {
    this.props.onChange(_draftJs.RichUtils.toggleBlockType(this.props.editorState, blockType));
}

function handleOnKeyPress(setFuncOnEnter, event) {
    if (event.key == 'Enter') {
        event.preventDefault();
        setFuncOnEnter(); //function passed on call, to be done on pressing Enter
    };
}

function updateLinkInputValue(e) {
    this.setState({ inputRef: e.target.value });
}

function setLink() {
    var url = this.state.inputRef;
    var editorState = this.props.editorState;

    var selection = editorState.getSelection();
    var entityKey = _draftJs.Entity.create(_draftJsUtils.ENTITY_TYPE.LINK, 'MUTABLE', { url: url });
    this.props.onChange(_draftJs.RichUtils.toggleLink(editorState, selection, entityKey));
    this.togglePopover();
}

function toggleLink(event) {
    var popoverPlacement = setPopoverPlacement(event);
    this.togglePopover(popoverPlacement);
    var editorState = this.props.editorState;

    var entity = (0, _getEntityAtCursor2.default)(editorState);
    if (entity == null) {
        this.setState({ inputRef: '' });
    };
}

function removeLink() {
    var editorState = this.props.editorState;

    var entity = (0, _getEntityAtCursor2.default)(editorState);
    if (entity != null) {
        var blockKey = entity.blockKey;
        var startOffset = entity.startOffset;
        var endOffset = entity.endOffset;

        this.props.onChange((0, _clearEntityForRange2.default)(editorState, blockKey, startOffset, endOffset));
    };
    this.setState({ inputRef: '' });
}

function isLinkingDisabled() {
    var editorState = this.props.editorState;

    var selection = editorState.getSelection();
    var hasSelection = !selection.isCollapsed();
    var entity = (0, _getEntityAtCursor2.default)(editorState);
    var isCursorOnLink = entity != null;
    var shouldShowLinkButton = hasSelection || isCursorOnLink;

    return [shouldShowLinkButton, isCursorOnLink];
}

function toggleColorsTrigger(key, event) {
    var popoverPlacement = setPopoverPlacement(event);
    this.setState({
        showPopover: true,
        popoverBasis: popoverPlacement,
        popoverKey: key
    });
}

function toggleInlineColorsStyle(inlineStyle) {
    var editorState = this.props.editorState;

    this.props.onChange(_draftJs.RichUtils.toggleInlineStyle(editorState, inlineStyle));
    this.togglePopover();
}

function toggleFillColorsStyle(inlineStyle) {
    var editorState = this.props.editorState;


    this.props.onChange(_draftJs.RichUtils.toggleInlineStyle(editorState, inlineStyle));
    this.togglePopover();
}

function undo() {
    var editorState = this.props.editorState;

    this.props.onChange(_draftJs.EditorState.undo(editorState));
}

function redo() {
    var editorState = this.props.editorState;

    this.props.onChange(_draftJs.EditorState.redo(editorState));
}

function addImageLink() {
    var url = this.state.inputRef;
    var editorState = this.props.editorState;

    var entityKey = _draftJs.Entity.create('atomic', 'IMMUTABLE', { src: url });
    this.props.onChange(_draftJs.AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));
    this.togglePopover();
}

function uploadImage() {
    this.refs.fileInput.click();
}

function fileInput(e) {
    var fileList = e.target.files;
    var file = fileList[0];
    this.insertImage(file);
}

function insertImage(file) {
    var editorState = this.props.editorState;

    var entityKey = _draftJs.Entity.create('atomic', 'IMMUTABLE', { src: URL.createObjectURL(file) });
    this.props.onChange(_draftJs.AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' '));
}

function setPopoverPlacement(event) {
    var thisWidth = window.innerWidth;
    var fromRight = thisWidth - event.clientX;
    var fromLeft = event.clientX;
    var popMaxWidth = 300;

    var popoverPlacement = fromRight < popMaxWidth && fromLeft < popMaxWidth ? { 'left': 0, 'maxWidth': thisWidth, 'position': 'fixed' } : fromRight < popMaxWidth ? { 'right': 0, 'maxWidth': popMaxWidth, 'position': 'absolute' } : { 'left': 0, 'maxWidth': popMaxWidth, 'position': 'absolute' };

    return popoverPlacement;
}

function togglePopover(popoverPlacement) {
    var isShowing = this.state.showPopover;
    this.setState({
        showPopover: !isShowing,
        popoverBasis: popoverPlacement
    });
}

function closePopoverOnResize() {
    if (this.state.showPopover) {
        this.togglePopover();
    }
}