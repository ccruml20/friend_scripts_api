'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createValueFromString = exports.createEmptyValue = exports.decorator = exports.EditorValue = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _draftJs = require('draft-js');

var _styles = require('./assets/styles');

var _styles2 = _interopRequireDefault(_styles);

var _styleMap = require('./assets/styleMap');

var _styleMap2 = _interopRequireDefault(_styleMap);

var _EditorValue = require('./lib/EditorValue');

var _EditorValue2 = _interopRequireDefault(_EditorValue);

var _LinkDecorator = require('./lib/LinkDecorator');

var _LinkDecorator2 = _interopRequireDefault(_LinkDecorator);

var _EditorToolbar = require('./lib/EditorToolbar');

var _EditorToolbar2 = _interopRequireDefault(_EditorToolbar);

var _events = require('events');

var _ImageComponent = require('./lib/ImageComponent');

var _ImageComponent2 = _interopRequireDefault(_ImageComponent);

var _RichTextEditorFunctions = require('./functions/RichTextEditorFunctions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MAX_LIST_DEPTH = 2;

var ChangeHandler = function ChangeHandler(value) {
    return any;
};

var Props = {
    onChange: ChangeHandler
};

var RichTextEditor = function (_Component) {
    _inherits(RichTextEditor, _Component);

    function RichTextEditor() {
        _classCallCheck(this, RichTextEditor);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RichTextEditor).apply(this, arguments));

        _this.blockRenderer = function (block) {
            if (block.getType() === 'atomic') {
                return {
                    component: _ImageComponent2.default
                };
            }
            return null;
        };

        _this._keyEmitter = new _events.EventEmitter();
        _this.onChange = _RichTextEditorFunctions.onChange.bind(_this);
        _this.shouldHidePlaceholder = _RichTextEditorFunctions.shouldHidePlaceholder.bind(_this);
        _this.handleReturn = _RichTextEditorFunctions.handleReturn.bind(_this);
        _this.handleReturnSoftNewline = _RichTextEditorFunctions.handleReturnSoftNewline.bind(_this);
        _this.handleReturnEmptyListItem = _RichTextEditorFunctions.handleReturnEmptyListItem.bind(_this);
        _this.handleReturnSpecialBlock = _RichTextEditorFunctions.handleReturnSpecialBlock.bind(_this);
        _this.onTab = _RichTextEditorFunctions.onTab.bind(_this);
        _this.customKeyHandler = _RichTextEditorFunctions.customKeyHandler.bind(_this);
        _this.handleKeyCommand = _RichTextEditorFunctions.handleKeyCommand.bind(_this);
        _this.focus = _RichTextEditorFunctions.focus.bind(_this);
        _this.getBlockStyle = _RichTextEditorFunctions.getBlockStyle.bind(_this);
        _this.createEmptyValue = _RichTextEditorFunctions.createEmptyValue.bind(_this);
        _this.createValueFromString = _RichTextEditorFunctions.createValueFromString.bind(_this);
        return _this;
    }

    _createClass(RichTextEditor, [{
        key: 'render',
        value: function render() {
            var props = this.props;
            var richTextEditorStyles = props.richTextEditorStyles;

            var editorState = props.value.getEditorState();

            var placeholder = props.placeholder ? props.placeholder : '';
            // If the user changes block type before entering any text, we can either
            // style the placeholder or hide it. Let's just hide it for now.

            return _react2.default.createElement(
                'div',
                { style: richTextEditorStyles.richtext },
                _react2.default.createElement(_EditorToolbar2.default, { className: 'toolbar',
                    keyEmitter: this._keyEmitter,
                    editorState: editorState,
                    onChange: this.onChange,
                    focusEditor: this.focus
                }),
                _react2.default.createElement(
                    'div',
                    { style: richTextEditorStyles.editor },
                    _react2.default.createElement(_draftJs.Editor, {
                        blockRendererFn: this.blockRenderer,
                        blockStyleFn: this.getBlockStyle,
                        customStyleMap: _styleMap2.default,
                        editorState: editorState,
                        handleReturn: this.handleReturn,
                        keyBindingFn: this.customKeyHandler,
                        handleKeyCommand: this.handleKeyCommand,
                        onTab: this.onTab,
                        onChange: this.onChange,
                        placeholder: placeholder,
                        ref: 'editor',
                        spellCheck: true
                    })
                )
            );
        }
    }]);

    return RichTextEditor;
}(_react.Component);

exports.default = RichTextEditor;


var decorator = new _draftJs.CompositeDecorator([_LinkDecorator2.default]);

exports.EditorValue = _EditorValue2.default;
exports.decorator = decorator;
exports.createEmptyValue = _RichTextEditorFunctions.createEmptyValue;
exports.createValueFromString = _RichTextEditorFunctions.createValueFromString;


RichTextEditor.propTypes = {
    richTextEditorStyles: _react.PropTypes.object,
    className: _react.PropTypes.string,
    placeholder: _react.PropTypes.string,
    toolbarColor: _react.PropTypes.string,
    value: _react.PropTypes.object
};

RichTextEditor.defaultProps = {
    richTextEditorStyles: _styles2.default.richTextEditorStyles
};